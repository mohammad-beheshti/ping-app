/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.2
 */
import * as reactQuery from "@tanstack/react-query";
import {useApiContext, ApiContext} from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import {apiFetch} from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type AppControllerGetHelloError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerGetHelloVariables = ApiContext["fetcherOptions"];

export const fetchAppControllerGetHello = (
  variables: AppControllerGetHelloVariables,
) =>
  apiFetch<undefined, AppControllerGetHelloError, undefined, {}, {}, {}>({
    url: "/",
    method: "get",
    ...variables,
  });

export const useAppControllerGetHello = (
  variables: AppControllerGetHelloVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      AppControllerGetHelloError,
      undefined
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const {fetcherOptions, queryOptions, queryKeyFn} = useApiContext(options);
  return reactQuery.useQuery<undefined, AppControllerGetHelloError, undefined>(
    queryKeyFn({path: "/", operationId: "appControllerGetHello", variables}),
    () => fetchAppControllerGetHello({...fetcherOptions, ...variables}),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UsersControllerCreateError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 409;
      payload: Schemas.ConflictResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type UsersControllerCreateVariables = {
  body: Schemas.CreateUserDto;
} & ApiContext["fetcherOptions"];

export const fetchUsersControllerCreate = (
  variables: UsersControllerCreateVariables,
) =>
  apiFetch<
    Schemas.UserDto,
    UsersControllerCreateError,
    Schemas.CreateUserDto,
    {},
    {},
    {}
  >({url: "/users", method: "post", ...variables});

export const useUsersControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UserDto,
      UsersControllerCreateError,
      UsersControllerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const {fetcherOptions} = useApiContext();
  return reactQuery.useMutation<
    Schemas.UserDto,
    UsersControllerCreateError,
    UsersControllerCreateVariables
  >(
    (variables: UsersControllerCreateVariables) =>
      fetchUsersControllerCreate({...fetcherOptions, ...variables}),
    options,
  );
};

export type UsersControllerFindAllError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type UsersControllerFindAllResponse = Schemas.UserDto[];

export type UsersControllerFindAllVariables = ApiContext["fetcherOptions"];

export const fetchUsersControllerFindAll = (
  variables: UsersControllerFindAllVariables,
) =>
  apiFetch<
    UsersControllerFindAllResponse,
    UsersControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({url: "/users", method: "get", ...variables});

export const useUsersControllerFindAll = (
  variables: UsersControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersControllerFindAllResponse,
      UsersControllerFindAllError,
      UsersControllerFindAllResponse
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const {fetcherOptions, queryOptions, queryKeyFn} = useApiContext(options);
  return reactQuery.useQuery<
    UsersControllerFindAllResponse,
    UsersControllerFindAllError,
    UsersControllerFindAllResponse
  >(
    queryKeyFn({
      path: "/users",
      operationId: "usersControllerFindAll",
      variables,
    }),
    () => fetchUsersControllerFindAll({...fetcherOptions, ...variables}),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UsersControllerFindOnePathParams = {
  id: string;
};

export type UsersControllerFindOneError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type UsersControllerFindOneVariables = {
  pathParams: UsersControllerFindOnePathParams;
} & ApiContext["fetcherOptions"];

export const fetchUsersControllerFindOne = (
  variables: UsersControllerFindOneVariables,
) =>
  apiFetch<
    Schemas.UserDto,
    UsersControllerFindOneError,
    undefined,
    {},
    {},
    UsersControllerFindOnePathParams
  >({url: "/users/{id}", method: "get", ...variables});

export const useUsersControllerFindOne = (
  variables: UsersControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserDto,
      UsersControllerFindOneError,
      Schemas.UserDto
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const {fetcherOptions, queryOptions, queryKeyFn} = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.UserDto,
    UsersControllerFindOneError,
    Schemas.UserDto
  >(
    queryKeyFn({
      path: "/users/{id}",
      operationId: "usersControllerFindOne",
      variables,
    }),
    () => fetchUsersControllerFindOne({...fetcherOptions, ...variables}),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type UsersControllerUpdatePathParams = {
  id: string;
};

export type UsersControllerUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type UsersControllerUpdateVariables = {
  body?: Schemas.UpdateUserDto;
  pathParams: UsersControllerUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchUsersControllerUpdate = (
  variables: UsersControllerUpdateVariables,
) =>
  apiFetch<
    undefined,
    UsersControllerUpdateError,
    Schemas.UpdateUserDto,
    {},
    {},
    UsersControllerUpdatePathParams
  >({url: "/users/{id}", method: "patch", ...variables});

export const useUsersControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UsersControllerUpdateError,
      UsersControllerUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const {fetcherOptions} = useApiContext();
  return reactQuery.useMutation<
    undefined,
    UsersControllerUpdateError,
    UsersControllerUpdateVariables
  >(
    (variables: UsersControllerUpdateVariables) =>
      fetchUsersControllerUpdate({...fetcherOptions, ...variables}),
    options,
  );
};

export type UsersControllerRemovePathParams = {
  id: string;
};

export type UsersControllerRemoveError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type UsersControllerRemoveVariables = {
  pathParams: UsersControllerRemovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchUsersControllerRemove = (
  variables: UsersControllerRemoveVariables,
) =>
  apiFetch<
    Schemas.UserDto,
    UsersControllerRemoveError,
    undefined,
    {},
    {},
    UsersControllerRemovePathParams
  >({url: "/users/{id}", method: "delete", ...variables});

export const useUsersControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UserDto,
      UsersControllerRemoveError,
      UsersControllerRemoveVariables
    >,
    "mutationFn"
  >,
) => {
  const {fetcherOptions} = useApiContext();
  return reactQuery.useMutation<
    Schemas.UserDto,
    UsersControllerRemoveError,
    UsersControllerRemoveVariables
  >(
    (variables: UsersControllerRemoveVariables) =>
      fetchUsersControllerRemove({...fetcherOptions, ...variables}),
    options,
  );
};

export type ServersControllerCreateError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type ServersControllerCreateVariables = {
  body: Schemas.CreateServerDto;
} & ApiContext["fetcherOptions"];

export const fetchServersControllerCreate = (
  variables: ServersControllerCreateVariables,
) =>
  apiFetch<
    Schemas.ServerDto,
    ServersControllerCreateError,
    Schemas.CreateServerDto,
    {},
    {},
    {}
  >({url: "/servers", method: "post", ...variables});

export const useServersControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ServerDto,
      ServersControllerCreateError,
      ServersControllerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const {fetcherOptions} = useApiContext();
  return reactQuery.useMutation<
    Schemas.ServerDto,
    ServersControllerCreateError,
    ServersControllerCreateVariables
  >(
    (variables: ServersControllerCreateVariables) =>
      fetchServersControllerCreate({...fetcherOptions, ...variables}),
    options,
  );
};

export type ServersControllerFindAllError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type ServersControllerFindAllResponse = Schemas.ServerDto[];

export type ServersControllerFindAllVariables = ApiContext["fetcherOptions"];

export const fetchServersControllerFindAll = (
  variables: ServersControllerFindAllVariables,
) =>
  apiFetch<
    ServersControllerFindAllResponse,
    ServersControllerFindAllError,
    undefined,
    {},
    {},
    {}
  >({url: "/servers", method: "get", ...variables});

export const useServersControllerFindAll = (
  variables: ServersControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ServersControllerFindAllResponse,
      ServersControllerFindAllError,
      ServersControllerFindAllResponse
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const {fetcherOptions, queryOptions, queryKeyFn} = useApiContext(options);
  return reactQuery.useQuery<
    ServersControllerFindAllResponse,
    ServersControllerFindAllError,
    ServersControllerFindAllResponse
  >(
    queryKeyFn({
      path: "/servers",
      operationId: "serversControllerFindAll",
      variables,
    }),
    () => fetchServersControllerFindAll({...fetcherOptions, ...variables}),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ServersControllerFindOnePathParams = {
  id: string;
};

export type ServersControllerFindOneError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type ServersControllerFindOneVariables = {
  pathParams: ServersControllerFindOnePathParams;
} & ApiContext["fetcherOptions"];

export const fetchServersControllerFindOne = (
  variables: ServersControllerFindOneVariables,
) =>
  apiFetch<
    Schemas.ServerDto,
    ServersControllerFindOneError,
    undefined,
    {},
    {},
    ServersControllerFindOnePathParams
  >({url: "/servers/{id}", method: "get", ...variables});

export const useServersControllerFindOne = (
  variables: ServersControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ServerDto,
      ServersControllerFindOneError,
      Schemas.ServerDto
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const {fetcherOptions, queryOptions, queryKeyFn} = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.ServerDto,
    ServersControllerFindOneError,
    Schemas.ServerDto
  >(
    queryKeyFn({
      path: "/servers/{id}",
      operationId: "serversControllerFindOne",
      variables,
    }),
    () => fetchServersControllerFindOne({...fetcherOptions, ...variables}),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type ServersControllerUpdatePathParams = {
  id: string;
};

export type ServersControllerUpdateError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type ServersControllerUpdateVariables = {
  body?: Schemas.UpdateServerDto;
  pathParams: ServersControllerUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchServersControllerUpdate = (
  variables: ServersControllerUpdateVariables,
) =>
  apiFetch<
    Schemas.ServerDto,
    ServersControllerUpdateError,
    Schemas.UpdateServerDto,
    {},
    {},
    ServersControllerUpdatePathParams
  >({url: "/servers/{id}", method: "patch", ...variables});

export const useServersControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ServerDto,
      ServersControllerUpdateError,
      ServersControllerUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const {fetcherOptions} = useApiContext();
  return reactQuery.useMutation<
    Schemas.ServerDto,
    ServersControllerUpdateError,
    ServersControllerUpdateVariables
  >(
    (variables: ServersControllerUpdateVariables) =>
      fetchServersControllerUpdate({...fetcherOptions, ...variables}),
    options,
  );
};

export type ServersControllerRemovePathParams = {
  id: string;
};

export type ServersControllerRemoveError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 404;
      payload: Schemas.NotFoundResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type ServersControllerRemoveVariables = {
  pathParams: ServersControllerRemovePathParams;
} & ApiContext["fetcherOptions"];

export const fetchServersControllerRemove = (
  variables: ServersControllerRemoveVariables,
) =>
  apiFetch<
    Schemas.ServerDto,
    ServersControllerRemoveError,
    undefined,
    {},
    {},
    ServersControllerRemovePathParams
  >({url: "/servers/{id}", method: "delete", ...variables});

export const useServersControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ServerDto,
      ServersControllerRemoveError,
      ServersControllerRemoveVariables
    >,
    "mutationFn"
  >,
) => {
  const {fetcherOptions} = useApiContext();
  return reactQuery.useMutation<
    Schemas.ServerDto,
    ServersControllerRemoveError,
    ServersControllerRemoveVariables
  >(
    (variables: ServersControllerRemoveVariables) =>
      fetchServersControllerRemove({...fetcherOptions, ...variables}),
    options,
  );
};

export type AuthControllerLoginError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type AuthControllerLoginVariables = {
  body: Schemas.LoginDto;
} & ApiContext["fetcherOptions"];

export const fetchAuthControllerLogin = (
  variables: AuthControllerLoginVariables,
) =>
  apiFetch<
    Schemas.LoginResponseDto,
    AuthControllerLoginError,
    Schemas.LoginDto,
    {},
    {},
    {}
  >({url: "/auth/login", method: "post", ...variables});

export const useAuthControllerLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.LoginResponseDto,
      AuthControllerLoginError,
      AuthControllerLoginVariables
    >,
    "mutationFn"
  >,
) => {
  const {fetcherOptions} = useApiContext();
  return reactQuery.useMutation<
    Schemas.LoginResponseDto,
    AuthControllerLoginError,
    AuthControllerLoginVariables
  >(
    (variables: AuthControllerLoginVariables) =>
      fetchAuthControllerLogin({...fetcherOptions, ...variables}),
    options,
  );
};

export type AuthControllerGetProfileError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.UnauthorizedResponseDto;
    }
  | {
      status: 500;
      payload: Schemas.ServerErrorResponseDto;
    }
>;

export type AuthControllerGetProfileVariables = ApiContext["fetcherOptions"];

export const fetchAuthControllerGetProfile = (
  variables: AuthControllerGetProfileVariables,
) =>
  apiFetch<
    Schemas.GetProfileResponseDto,
    AuthControllerGetProfileError,
    undefined,
    {},
    {},
    {}
  >({url: "/auth/profile", method: "get", ...variables});

export const useAuthControllerGetProfile = (
  variables: AuthControllerGetProfileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.GetProfileResponseDto,
      AuthControllerGetProfileError,
      Schemas.GetProfileResponseDto
    >,
    "queryKey" | "queryFn"
  >,
) => {
  const {fetcherOptions, queryOptions, queryKeyFn} = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.GetProfileResponseDto,
    AuthControllerGetProfileError,
    Schemas.GetProfileResponseDto
  >(
    queryKeyFn({
      path: "/auth/profile",
      operationId: "authControllerGetProfile",
      variables,
    }),
    () => fetchAuthControllerGetProfile({...fetcherOptions, ...variables}),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type QueryOperation =
  | {
      path: "/";
      operationId: "appControllerGetHello";
      variables: AppControllerGetHelloVariables;
    }
  | {
      path: "/users";
      operationId: "usersControllerFindAll";
      variables: UsersControllerFindAllVariables;
    }
  | {
      path: "/users/{id}";
      operationId: "usersControllerFindOne";
      variables: UsersControllerFindOneVariables;
    }
  | {
      path: "/servers";
      operationId: "serversControllerFindAll";
      variables: ServersControllerFindAllVariables;
    }
  | {
      path: "/servers/{id}";
      operationId: "serversControllerFindOne";
      variables: ServersControllerFindOneVariables;
    }
  | {
      path: "/auth/profile";
      operationId: "authControllerGetProfile";
      variables: AuthControllerGetProfileVariables;
    };
